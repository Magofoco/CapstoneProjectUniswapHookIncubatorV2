/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IUnlockCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUnlockCallback__factory>;
    getContractFactory(
      name: "IERC20Minimal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Minimal__factory>;
    getContractFactory(
      name: "IERC6909Claims",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC6909Claims__factory>;
    getContractFactory(
      name: "IExtsload",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExtsload__factory>;
    getContractFactory(
      name: "IExttload",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExttload__factory>;
    getContractFactory(
      name: "IHooks",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHooks__factory>;
    getContractFactory(
      name: "IPoolManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolManager__factory>;
    getContractFactory(
      name: "IProtocolFeeController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProtocolFeeController__factory>;
    getContractFactory(
      name: "IProtocolFees",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProtocolFees__factory>;
    getContractFactory(
      name: "Hooks",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Hooks__factory>;
    getContractFactory(
      name: "LPFeeLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LPFeeLibrary__factory>;
    getContractFactory(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeCast__factory>;
    getContractFactory(
      name: "BalanceDeltaLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalanceDeltaLibrary__factory>;
    getContractFactory(
      name: "BeforeSwapDeltaLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BeforeSwapDeltaLibrary__factory>;
    getContractFactory(
      name: "CurrencyLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurrencyLibrary__factory>;
    getContractFactory(
      name: "PointsHook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PointsHook__factory>;
    getContractFactory(
      name: "MockToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockToken__factory>;
    getContractFactory(
      name: "BaseHook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseHook__factory>;
    getContractFactory(
      name: "ImmutableState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImmutableState__factory>;
    getContractFactory(
      name: "SafeCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeCallback__factory>;

    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IUnlockCallback",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUnlockCallback>;
    getContractAt(
      name: "IERC20Minimal",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Minimal>;
    getContractAt(
      name: "IERC6909Claims",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC6909Claims>;
    getContractAt(
      name: "IExtsload",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IExtsload>;
    getContractAt(
      name: "IExttload",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IExttload>;
    getContractAt(
      name: "IHooks",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IHooks>;
    getContractAt(
      name: "IPoolManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolManager>;
    getContractAt(
      name: "IProtocolFeeController",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IProtocolFeeController>;
    getContractAt(
      name: "IProtocolFees",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IProtocolFees>;
    getContractAt(
      name: "Hooks",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Hooks>;
    getContractAt(
      name: "LPFeeLibrary",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LPFeeLibrary>;
    getContractAt(
      name: "SafeCast",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeCast>;
    getContractAt(
      name: "BalanceDeltaLibrary",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BalanceDeltaLibrary>;
    getContractAt(
      name: "BeforeSwapDeltaLibrary",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BeforeSwapDeltaLibrary>;
    getContractAt(
      name: "CurrencyLibrary",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CurrencyLibrary>;
    getContractAt(
      name: "PointsHook",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PointsHook>;
    getContractAt(
      name: "MockToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockToken>;
    getContractAt(
      name: "BaseHook",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseHook>;
    getContractAt(
      name: "ImmutableState",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ImmutableState>;
    getContractAt(
      name: "SafeCallback",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeCallback>;

    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IUnlockCallback",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUnlockCallback>;
    deployContract(
      name: "IERC20Minimal",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Minimal>;
    deployContract(
      name: "IERC6909Claims",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC6909Claims>;
    deployContract(
      name: "IExtsload",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExtsload>;
    deployContract(
      name: "IExttload",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExttload>;
    deployContract(
      name: "IHooks",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHooks>;
    deployContract(
      name: "IPoolManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPoolManager>;
    deployContract(
      name: "IProtocolFeeController",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IProtocolFeeController>;
    deployContract(
      name: "IProtocolFees",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IProtocolFees>;
    deployContract(
      name: "Hooks",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Hooks>;
    deployContract(
      name: "LPFeeLibrary",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LPFeeLibrary>;
    deployContract(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "BalanceDeltaLibrary",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BalanceDeltaLibrary>;
    deployContract(
      name: "BeforeSwapDeltaLibrary",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BeforeSwapDeltaLibrary>;
    deployContract(
      name: "CurrencyLibrary",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CurrencyLibrary>;
    deployContract(
      name: "PointsHook",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PointsHook>;
    deployContract(
      name: "MockToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockToken>;
    deployContract(
      name: "BaseHook",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseHook>;
    deployContract(
      name: "ImmutableState",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ImmutableState>;
    deployContract(
      name: "SafeCallback",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCallback>;

    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IUnlockCallback",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUnlockCallback>;
    deployContract(
      name: "IERC20Minimal",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Minimal>;
    deployContract(
      name: "IERC6909Claims",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC6909Claims>;
    deployContract(
      name: "IExtsload",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExtsload>;
    deployContract(
      name: "IExttload",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExttload>;
    deployContract(
      name: "IHooks",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHooks>;
    deployContract(
      name: "IPoolManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPoolManager>;
    deployContract(
      name: "IProtocolFeeController",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IProtocolFeeController>;
    deployContract(
      name: "IProtocolFees",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IProtocolFees>;
    deployContract(
      name: "Hooks",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Hooks>;
    deployContract(
      name: "LPFeeLibrary",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LPFeeLibrary>;
    deployContract(
      name: "SafeCast",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "BalanceDeltaLibrary",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BalanceDeltaLibrary>;
    deployContract(
      name: "BeforeSwapDeltaLibrary",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BeforeSwapDeltaLibrary>;
    deployContract(
      name: "CurrencyLibrary",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CurrencyLibrary>;
    deployContract(
      name: "PointsHook",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PointsHook>;
    deployContract(
      name: "MockToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockToken>;
    deployContract(
      name: "BaseHook",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseHook>;
    deployContract(
      name: "ImmutableState",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ImmutableState>;
    deployContract(
      name: "SafeCallback",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCallback>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
